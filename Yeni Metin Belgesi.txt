1. Proje Planlaması
Gereksinim Analizi:
Avukatların kullanacağı özellikleri belirleyin: dava ekleme, müvekkil ekleme, dava detayları, dosya yükleme, takvim, ödeme takibi, e-posta bildirimleri gibi.
Teknoloji Seçimi:
Django veya Flask framework'lerinden birini seçin. Eğer daha hızlı gelişen bir proje istiyorsanız, Django'nun sunduğu hazır yönetici paneli ve kullanıcı yönetimi özelliklerinden yararlanabilirsiniz.
Veri Modeli Tasarımı:
Müvekkil, dava, ödeme gibi veri yapılarının ilişkilerini belirleyin (ör. bir müvekkilin birden fazla davası olabilir).

2. Proje Yapısı ve Modüller
Kullanıcı Yönetimi:
Avukatların ve belki müvekkillerin giriş yapabilmesini sağlayacak kullanıcı kimlik doğrulaması (authentication) sistemi kurun.
Müvekkil Takibi:
Müvekkil bilgilerini ekleme, güncelleme ve görüntüleme.
Dava Yönetimi:
Dava detaylarının girilmesi, duruşma tarihleri ve dava dosyalarının eklenmesi.
Bildirimler ve Takvim:
Önemli duruşma veya ödeme tarihleri için otomatik e-posta veya sistem içi bildirimler.
Raporlama ve Ödeme Takibi:
Avukatın müvekkillere yapılan hizmetler için ödeme alıp almadığını takip edebilmesi için bir ödeme raporu sistemi.

3. Görev Dağılımı
Kişi 1:
Backend Geliştirme:
Kullanıcı Yönetimi: Django'nun hazır auth sistemini entegre edin ya da Flask ile JWT tabanlı bir authentication sistemi kurun.
Veritabanı Modelleri: Dava ve müvekkil modellerini oluşturun.
API Geliştirme: RESTful API'ler oluşturun (özellikle müvekkil ve dava bilgileri için).
Ödeme Takibi: Müvekkillerin ödemelerini kaydedebilecek ve raporlayabilecek bir sistem geliştirin.
Kişi 2:
Frontend Geliştirme:
Kullanıcı Arayüzü (UI): Bootstrap, TailwindCSS veya başka bir framework ile responsive ve kullanımı kolay bir arayüz geliştirin.
Dava ve Müvekkil Takip Sayfaları: Müvekkil bilgileri, dava durumu gibi sayfaları oluşturun.
Bildirimler ve Takvim: Avukatların yaklaşan duruşma tarihleri gibi kritik bilgileri görebileceği bir takvim veya bildirim sistemi ekleyin.
Dosya Yükleme Sistemi: Dava dosyalarının yüklenebilmesi ve bu dosyaların görüntülenebilmesi için bir frontend komponenti ekleyin.
4. Test ve Hata Ayıklama
Her iki tarafın geliştirdiği modüller birleştirildikten sonra, sistemin tüm parçalarını test edin.
Otomatik testler yazmaya özen gösterin (örneğin Django’nun testing framework'ünü kullanarak).
5. Yayınlama

Projeyi test aşamasından geçirdikten sonra, bulut tabanlı bir sunucuya (örneğin AWS, DigitalOcean) deploy edin.
SSL sertifikası ve güvenlik önlemleri almayı unutmayın.
Bu yol haritası proje boyunca size rehberlik edebilir ve görev paylaşımı sayesinde iş yükü dengeli bir şekilde dağılacaktır.


TABLO 1 BİLDİRİMLER:

SÜTUNLAR : BİLDİRİM İD - BİLDİRİM URL - BİLDİRİM METNİ - BİLDİRİM KATEGORİSİ (ÖNCELİK) (KIRMIZI-SARI-YEŞİL) - OKUNMA DURUMU (TRUE FALSE)